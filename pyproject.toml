[project]
name = "DocAI"
version = "0.0.1"
description = "Document AI"
authors = [{ name = "Adrian Yeung", email = "yeungadrianjy@gmail.com" }]
readme = "README.md"
keywords = ["python"]
requires-python = ">=3.11,<4.0"
dependencies = [
    "pydantic>=2.10.4",
    "pypdf>=5.1.0",
    "python-calamine>=0.3.1",
    "python-docx>=1.1.2",
    "tabulate>=0.9.0",
]

[dependency-groups]
dev = [
    "coverage[toml]>=7.6.9",
    "pre-commit>=4.0.1",
    "pyright>=1.1.391",
    "pytest>=8.3.4",
    "tox-uv>=1.11.3",
]

[tool.ruff]
line-length = 108
fix = true

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
  "F",      # Pyflakes
  "E",      # pycodestyle (Error)
  "I",      # isort
  "D",      # pydocstyle
  "UP",     # pyupgrade
  "YTT",    # flake8-2020
  "B",      # flake8-bugbear
  "T10",    # flake8-debugger
  "T20",    # flake8-print
  "C4",     # flake8-comprehensions
]
ignore = [
  "D401",   # non-imperative-mood
  "D105",   # undocumented-magic-method
  "D107",   # undocumented-public-init
]
pydocstyle = { convention = "numpy" }
pycodestyle = { max-doc-length = 108 }

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]

[tool.coverage.run]
source = ['docai']
branch = true
relative_files = true
context = '${CONTEXT}'

[tool.coverage.report]
precision = 2

[tool.coverage.paths]
source = [
    'docai/',
]

[tool.pyright]
strict = ["docai"]
enableExperimentalFeatures = true
